model User {
    id            String  @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    packageId     String?
    uplineId      String?

    createdAt DateTime
    updatedAt DateTime

    role       String?
    banned     Boolean?
    banReason  String?
    banExpires DateTime?

    sessions Session[]
    accounts Account[]

    upline    User?  @relation(fields: [uplineId], references: [id], name: "UserUpline")
    downlines User[] @relation(name: "UserUpline")

    package      Package?     @relation(fields: [packageId], references: [id])
    withdrawals  Withdrawal[]
    pointsEarned Int      @default(0)
    clickStats   ClickStats?

    @@unique([email])
    @@map("users")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    impersonatedBy String?

    @@unique([token])
    @@map("sessions")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("accounts")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verifications")
}
